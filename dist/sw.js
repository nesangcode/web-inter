const CACHE_NAME="dicoding-stories-v2",RUNTIME_CACHE="dicoding-stories-runtime-v2",IMAGE_CACHE="dicoding-stories-images-v2",API_CACHE="dicoding-stories-api-v2",urlsToCache=["/","./index.html","./favicon.png","./manifest.json","./styles/styles.css","./scripts/index.js"];async function handleApiRequest(t){const e=await caches.open(API_CACHE);try{const a=await fetch(t);return a.ok?(e.put(t,a.clone()),a):await e.match(t)||a}catch(a){const n=await e.match(t);if(n)return n;if(t.url.includes("/stories"))return new Response(JSON.stringify({error:!0,message:"Offline - data tidak tersedia"}),{status:503,headers:{"Content-Type":"application/json"}});throw a}}async function handleImageRequest(t){const e=await caches.open(IMAGE_CACHE),a=await e.match(t);if(a)return a;try{const a=await fetch(t);return a.ok&&e.put(t,a.clone()),a}catch(t){return new Response("",{status:503,statusText:"Image not available offline"})}}async function handleNavigationRequest(t){try{return await fetch(t)}catch(t){const e=await caches.open(CACHE_NAME);return await e.match("/")||await e.match("./index.html")||new Response("Offline - halaman tidak tersedia",{status:503,headers:{"Content-Type":"text/html"}})}}self.addEventListener("install",(t=>{t.waitUntil(caches.open(CACHE_NAME).then((t=>(console.log("Opened cache"),Promise.allSettled(urlsToCache.map((e=>t.add(e).catch((t=>(console.warn(`Failed to cache ${e}:`,t),null))))))))).then((()=>(console.log("Cache installation completed"),self.skipWaiting()))).catch((t=>{console.error("Cache installation failed:",t)})))})),self.addEventListener("fetch",(t=>{if("GET"!==t.request.method)return;const{request:e}=t,a=new URL(e.url);a.protocol.startsWith("http")&&(a.pathname.startsWith("/v1/")?t.respondWith(handleApiRequest(e)):"image"===e.destination||a.pathname.match(/\.(jpg|jpeg|png|gif|webp|svg)$/i)?t.respondWith(handleImageRequest(e)):"navigate"!==e.mode?t.respondWith(caches.match(e).then((a=>a?(console.log("Serving from cache:",t.request.url),a):fetch(e).then((t=>{if(!t||200!==t.status||"basic"!==t.type)return t;const a=t.clone();return caches.open(RUNTIME_CACHE).then((t=>{t.put(e,a)})).catch((t=>{console.warn("Failed to cache response:",t)})),t})).catch((t=>{throw console.warn("Fetch failed:",t),t}))))):t.respondWith(handleNavigationRequest(e)))})),self.addEventListener("activate",(t=>{const e=[CACHE_NAME,RUNTIME_CACHE,IMAGE_CACHE,API_CACHE];t.waitUntil(Promise.all([caches.keys().then((t=>Promise.all(t.map((t=>{if(!e.includes(t))return console.log("Deleting old cache:",t),caches.delete(t)}))))),self.clients.claim()]).then((()=>{console.log("Service worker activated and ready")})))})),self.addEventListener("push",(t=>{console.log("Push event received:",t);let e={title:"Dicoding Stories",options:{body:"Ada story baru yang dibagikan!",icon:"/favicon.png",badge:"/favicon.png",data:{url:"/"}}};if(t.data)try{const a=t.data.json();e.title=a.title||e.title,e.options.body=a.options?.body||e.options.body,e.options.data=a.options?.data||e.options.data}catch(t){console.error("Error parsing push notification data:",t)}t.waitUntil(self.registration.showNotification(e.title,e.options))})),self.addEventListener("notificationclick",(t=>{console.log("Notification click received."),t.notification.close();const e=t.notification.data?.url||"/";t.waitUntil(clients.openWindow(e))}));